name: Deploy React to Docker Hub

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: dahndell/lottomate_front
  DOCKER_TAG: latest

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies 
        run: yarn install

      - name: Build React App
        run: yarn build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            CONTAINER_NAME="lottomate_front"
            IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}"

            # 기존 컨테이너 중지 및 삭제
            if sudo docker ps -a --format "{{.Names}}" | grep -w "$CONTAINER_NAME"; then
              echo "Stopping and removing existing container: $CONTAINER_NAME"
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            fi

            # 오래된 이미지 정리
            echo "Pruning unused Docker images..."
            sudo docker image prune -f

            # 최신 이미지로 컨테이너 실행 (강제 pull)
            echo "Running new container with --pull always..."
            sudo docker run --pull always -d --name $CONTAINER_NAME -p 3001:80 $IMAGE_NAME

            # index.html 내용 일부 확인
            echo "Checking /usr/share/nginx/html/index.html inside container:"
            sudo docker exec $CONTAINER_NAME head -n 20 /usr/share/nginx/html/index.html || echo "!! Could not read index.html"

